
# Use Linux (Android not supported on macOS)
os: linux
dist: jammy

# Android environment
language: android
jdk: openjdk17

# Android SDK setup
android:
  components:
    - build-tools-35.0.0
    - android-36
    - platform-tools

# Cache Gradle directories for faster builds
cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
    - $HOME/.android/build-cache

# Environment variables
env:
  global:
    - ANDROID_HOME=$HOME/android-sdk
    - PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
    # Default values for debug keystore
    - KEYSTORE_PATH=$HOME/.android/debug.keystore
    - KEYSTORE_ALIAS=androiddebugkey
    - KEYSTORE_PASS=android

# Before build: make Gradle wrapper executable
before_install:
  - chmod +x gradlew
  -
#before_script:
#  # Set up and start Android emulator
#  - sdkmanager "system-images;android-34;google_apis;x86_64"
#  - echo "no" | avdmanager create avd -n test -k "system-images;android-34;google_apis;x86_64" --abi x86_64 --device "pixel"
#  - emulator -avd test -no-window -no-audio -no-accel -no-snapshot -gpu swiftshader_indirect &
#  - adb wait-for-device
#  - adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
#  - adb shell input keyevent 82
#  - echo "Emulator started successfully!"

# Main build steps
script:
  # 1. Clean project
  - ./gradlew clean
  # 2. Run unit tests
  - ./gradlew test

  # 3. Run Instrumentation tests
  #- ./gradlew connectedAndroidTest

  # 4. Build APK (only if tests pass)
  - ./gradlew assembleDebug
  #- ./gradlew assembleRelease

  # - ./gradlew assembleRelease

# Optional: upload APKs to GitHub Releases
before_deploy:
  - mkdir -p app/build/outputs/apk/

deploy:
  provider: releases
  token: $GITHUB_TOKEN # Define in Travis CI settings
  tag_name: "version-4"
  name: "Latest Travis Build"
  file:
    - app/build/outputs/apk/debug/app-debug.apk
    # - app/build/outputs/apk/release/app-release.apk
  skip_cleanup: true
  on:
    branch: master